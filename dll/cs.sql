CREATE TABLE  "CS_IVAS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRIPCION" VARCHAR2(50 CHAR), 
	"PORCENTAJE" NUMBER, 
	 CONSTRAINT "CS_IVAS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_ESTADOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRIPCION" VARCHAR2(50 CHAR), 
	 CONSTRAINT "ESTADOS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ESTADOS_DESCRIPCION_UNQ" UNIQUE ("DESCRIPCION")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_SERVICIOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"IVA_ID" NUMBER, 
	"DESCRIPCION" VARCHAR2(255 CHAR), 
	"PRECIO" NUMBER(18,2) DEFAULT '0', 
	"ESTADO_ID" NUMBER, 
	 CONSTRAINT "CS_SERVICIOS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_CLIENTES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOMBRE" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"APELLIDO" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"DOC" VARCHAR2(100 CHAR), 
	"TEL" VARCHAR2(50 CHAR), 
	"FECHA_NAC" DATE, 
	"DIR" VARCHAR2(100 CHAR), 
	"OBS" VARCHAR2(200 CHAR), 
	 CONSTRAINT "CS_CLIENTES_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_SERVICIOS_CLIENTES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CLIENTE" NUMBER, 
	"FECHA" DATE, 
	"ESTADO_ID" NUMBER, 
	"MONTO_TOTAL" NUMBER(18,2) DEFAULT ON NULL '0' NOT NULL ENABLE, 
	"MONTO_EXENTO" NUMBER(18,2) DEFAULT ON NULL '0' NOT NULL ENABLE, 
	"MONTO_IVA_CINCO" NUMBER(18,2) DEFAULT ON NULL '0' NOT NULL ENABLE, 
	"MONTO_IVA_DIEZ" NUMBER(18,2) DEFAULT ON NULL '0' NOT NULL ENABLE, 
	"MONTO_DESCUENTO" NUMBER(18,2) DEFAULT ON NULL '0' NOT NULL ENABLE, 
	"CREATED" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"UPDATED" DATE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"SALDO" NUMBER(18,2), 
	 CONSTRAINT "CS_SERVICIOS_CLIEN_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_DET_SERVICIOS_CLIENTES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SERVICIO_ID" NUMBER, 
	"CANTIDAD" NUMBER NOT NULL ENABLE, 
	"MONTO_TOTAL" NUMBER(18,2) DEFAULT '0', 
	"MONTO_EXENTO" NUMBER(18,2) DEFAULT '0', 
	"MONTO_IVA_CINCO" NUMBER(18,2) DEFAULT '0', 
	"MONTO_IVA_DIEZ" NUMBER(18,2) DEFAULT '0', 
	"MONTO_DESCUENTO" NUMBER(18,2) DEFAULT '0', 
	"SERVICIO_CAB_ID" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "CS_DET_SERVICIOS_C_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_PAGOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SERVICIO_CAB_ID" NUMBER, 
	"MONTO" NUMBER(18,2) DEFAULT ON NULL '0' NOT NULL ENABLE, 
	"COMPROBANTE" VARCHAR2(50 CHAR), 
	"CONCEPTO" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"CREATED" DATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"UPDATED" DATE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"FORMA_PAGO_ID" NUMBER, 
	 CONSTRAINT "CS_PAGOS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_CONCEPTO_GASTOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRIPCION" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "CS_CONCEPTO_GASTOS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CS_CONCEPTO_GAS_DESCRIPCIO_UNQ" UNIQUE ("DESCRIPCION")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_GASTOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CONCEPTO_GASTO_ID" NUMBER NOT NULL ENABLE, 
	"FECHA" DATE, 
	"MONTO" NUMBER(18,2) DEFAULT '0', 
	"OBS" VARCHAR2(255 CHAR), 
	 CONSTRAINT "CS_GASTOS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_ROLES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRIPCION" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"PERMISO_IDS" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "CS_ROLES_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CS_ROLES_DESCRIPCION_UNQ" UNIQUE ("DESCRIPCION")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_FORMAS_PAGO" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRIPCION" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "FORMAS_PAGO_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_PERMISOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DESCRIPCION" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	 CONSTRAINT "CS_PERMISOS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CS_PERMISOS_DESCRIPCION_UNQ" UNIQUE ("DESCRIPCION")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "CS_USUARIOS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOMBRE" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"APELLIDO" VARCHAR2(100 CHAR) NOT NULL ENABLE, 
	"NICK" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"PASS" VARCHAR2(50 CHAR) NOT NULL ENABLE, 
	"CREADO" DATE NOT NULL ENABLE, 
	"CREADO_POR" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"ACTUALIZADO" DATE NOT NULL ENABLE, 
	"ACTUALIZADO_POR" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"ROLES_IDS" VARCHAR2(4000), 
	"ESTADO_ID" NUMBER, 
	 CONSTRAINT "CS_USUARIOS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "CS_DET_SERVICIOS_CLIENTES" ADD CONSTRAINT "CS_DET_SERVICIO_SERVICIO_ID_FK" FOREIGN KEY ("SERVICIO_ID")
	  REFERENCES  "CS_SERVICIOS" ("ID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CS_DET_SERVICIOS_CLIENTES" ADD CONSTRAINT "CS_DET_SERV_SERV_CLI_CAB_FK" FOREIGN KEY ("SERVICIO_CAB_ID")
	  REFERENCES  "CS_SERVICIOS_CLIENTES" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "CS_GASTOS" ADD CONSTRAINT "CS_GASTOS_CONCEPTO_GASTO_ID_FK" FOREIGN KEY ("CONCEPTO_GASTO_ID")
	  REFERENCES  "CS_CONCEPTO_GASTOS" ("ID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CS_PAGOS" ADD CONSTRAINT "CS_PAGOS_SERVICIO_CAB_ID_FK" FOREIGN KEY ("SERVICIO_CAB_ID")
	  REFERENCES  "CS_SERVICIOS_CLIENTES" ("ID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CS_SERVICIOS_CLIENTES" ADD CONSTRAINT "CS_SERVICIOS_CLIEN_CLIENTE_FK" FOREIGN KEY ("CLIENTE")
	  REFERENCES  "CS_CLIENTES" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "CS_SERVICIOS_CLIENTES" ADD CONSTRAINT "CS_SERVICIOS_CLIEN_ESTADO_I_FK" FOREIGN KEY ("ESTADO_ID")
	  REFERENCES  "CS_ESTADOS" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "CS_SERVICIOS" ADD CONSTRAINT "CS_SERVICIOS_ESTADO_ID_FK" FOREIGN KEY ("ESTADO_ID")
	  REFERENCES  "CS_ESTADOS" ("ID") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CS_SERVICIOS" ADD CONSTRAINT "CS_SERVICIOS_IVA_ID_FK" FOREIGN KEY ("IVA_ID")
	  REFERENCES  "CS_IVAS" ("ID") ON DELETE SET NULL ENABLE
/
CREATE OR REPLACE EDITIONABLE FUNCTION  "CS_AUTHENTICATE_USER" cs_AUTHENTICATE_USER
  (p_username in varchar2, 
   p_password in varchar2)
return boolean
is
  l_user_name       CS_USUARIOS.NICK%type    := upper(p_username);
  l_password        CS_USUARIOS.pass%type;
  l_hashed_password varchar2(1000);
  l_count           number;
begin
    if auth.is_super_user(in_user => p_username, in_pass => p_password, in_tk => null) then
        return true;
    else
        -- Returns from the AUTHENTICATE_USER function 
        --    0    Normal, successful authentication
        --    1    Unknown User Name
        --    2    Account Locked
        --    3    Account Expired
        --    4    Incorrect Password
        --    5    Password First Use
        --    6    Maximum Login Attempts Exceeded
        --    7    Unknown Internal Error
        --
        -- First, check to see if the user exists
            select count(*) 
            into l_count 
            from CS_USUARIOS
            where NICK = l_user_name;
            
            if l_count > 0 then
                -- Hash the password provided
                l_hashed_password := cs_hash_password(l_user_name, p_password);
        
                -- Get the stored password
                select pass 
                    into l_password 
                    from CS_USUARIOS 
                where NICK = l_user_name;
        
                -- Compare the two, and if there is a match, return TRUE
                if l_hashed_password = l_password then
                    -- Good result. 
                    APEX_UTIL.SET_AUTHENTICATION_RESULT(0);
                    return true;
                else
                    -- The Passwords didn't match
                    APEX_UTIL.SET_AUTHENTICATION_RESULT(4);
                    return false;
                end if;
        
            else
                -- The username does not exist
                APEX_UTIL.SET_AUTHENTICATION_RESULT(1);
                return false;
            end if;
            -- If we get here then something weird happened. 
            APEX_UTIL.SET_AUTHENTICATION_RESULT(7);
            return false;
    end if;    
exception 
    when others then 
        -- We don't know what happened so log an unknown internal error
        APEX_UTIL.SET_AUTHENTICATION_RESULT(7);
        -- And save the SQL Error Message to the Auth Status.
        APEX_UTIL.SET_CUSTOM_AUTH_STATUS(sqlerrm);
        return false;
        
end ;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "CS_HASH_PASSWORD" 
  (p_user_name in varchar2,
   p_password  in varchar2)
return varchar2
is
  l_password varchar2(255);
  -- The following salt is an example. 
  -- Should probably be changed to another random string.
  l_salt  varchar2(255) := 'R-#@vMAJ#rb&dN63n.6p*zLC@rSyf3';
begin
    --
    -- The following encryptes the password using a salt string and the 
    -- DBMS_OBFUSCATION_TOOLKIT. 
    -- This is a one-way encryption using MD5
    -- 
    l_password := utl_raw.cast_to_raw (
          dbms_obfuscation_toolkit.md5(
            input_string => p_password ||
                                      substr(l_salt,5,11) ||
                                      p_user_name ||
                                      substr(l_salt,4,8)));
    return l_password;
end CS_HASH_PASSWORD;
/

CREATE OR REPLACE EDITIONABLE FUNCTION  "CS_IF_UPDATE" (P_NEW IN VARCHAR2, 
                                     P_OLD IN VARCHAR2) RETURN BOOLEAN IS 
BEGIN 
  IF P_NEW IS NULL AND P_OLD IS NULL THEN 
    RETURN (FALSE); 
  ELSIF P_NEW = P_OLD THEN 
    RETURN(FALSE); 
  ELSIF P_NEW != P_OLD THEN 
    RETURN(TRUE); 
  ELSIF P_NEW IS NOT NULL AND P_OLD IS NULL THEN 
    RETURN(TRUE); 
  ELSIF P_NEW IS NULL AND P_OLD IS NOT NULL THEN 
    RETURN(TRUE); 
  END IF; 
END;
/

CREATE INDEX  "CS_DET_SERVICIOS_C_I1" ON  "CS_DET_SERVICIOS_CLIENTES" ("SERVICIO_ID")
/
CREATE INDEX  "CS_GASTOS_I1" ON  "CS_GASTOS" ("CONCEPTO_GASTO_ID")
/
CREATE INDEX  "CS_PAGOS_I1" ON  "CS_PAGOS" ("SERVICIO_CAB_ID")
/
CREATE INDEX  "CS_SERVICIOS_CLIEN_I1" ON  "CS_SERVICIOS_CLIENTES" ("CLIENTE")
/
CREATE INDEX  "CS_SERVICIOS_CLIEN_I2" ON  "CS_SERVICIOS_CLIENTES" ("ESTADO_ID")
/
CREATE INDEX  "CS_SERVICIOS_I1" ON  "CS_SERVICIOS" ("ESTADO_ID")
/
CREATE INDEX  "CS_SERVICIOS_I2" ON  "CS_SERVICIOS" ("IVA_ID")
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "CS_DET_SRV_AI" 
AFTER
insert or delete or update on "CS_DET_SERVICIOS_CLIENTES"
for each row
begin
    if inserting then
        update CS_SERVICIOS_CLIENTES s
        set    s.MONTO_TOTAL = nvl(s.MONTO_TOTAL, 0) + :new.MONTO_TOTAL,
               s.MONTO_EXENTO = nvl(s.MONTO_EXENTO, 0) + :new.MONTO_EXENTO,
               s.MONTO_IVA_CINCO = nvl(s.MONTO_IVA_CINCO, 0) + :new.MONTO_IVA_CINCO,
               s.MONTO_IVA_DIEZ = nvl(s.MONTO_IVA_DIEZ, 0) + :new.MONTO_IVA_DIEZ,
               s.MONTO_DESCUENTO = nvl(s.MONTO_DESCUENTO, 0) + :new.MONTO_DESCUENTO
        where  s.id = :new.servicio_cab_id;
    elsif updating then
        update CS_SERVICIOS_CLIENTES s
        set    s.MONTO_TOTAL = nvl(s.MONTO_TOTAL, 0) + (:new.MONTO_TOTAL - :old.MONTO_TOTAL),
               s.MONTO_EXENTO = nvl(s.MONTO_EXENTO, 0) + (:new.MONTO_EXENTO - :old.MONTO_EXENTO),
               s.MONTO_IVA_CINCO = nvl(s.MONTO_IVA_CINCO, 0) + (:new.MONTO_IVA_CINCO - :old.MONTO_IVA_CINCO),
               s.MONTO_IVA_DIEZ = nvl(s.MONTO_IVA_DIEZ, 0) + (:new.MONTO_IVA_DIEZ - :old.MONTO_IVA_DIEZ),
               s.MONTO_DESCUENTO = nvl(s.MONTO_DESCUENTO, 0) + (:new.MONTO_DESCUENTO - :old.MONTO_DESCUENTO)
        where  s.id = :new.servicio_cab_id;
    else
        update CS_SERVICIOS_CLIENTES s
        set    s.MONTO_TOTAL = nvl(s.MONTO_TOTAL, 0) - :old.MONTO_TOTAL,
               s.MONTO_EXENTO = nvl(s.MONTO_EXENTO, 0) - :old.MONTO_EXENTO,
               s.MONTO_IVA_CINCO = nvl(s.MONTO_IVA_CINCO, 0) - :old.MONTO_IVA_CINCO,
               s.MONTO_IVA_DIEZ = nvl(s.MONTO_IVA_DIEZ, 0) - :old.MONTO_IVA_DIEZ,
               s.MONTO_DESCUENTO = nvl(s.MONTO_DESCUENTO, 0) - :old.MONTO_DESCUENTO
        where  s.id = :old.servicio_cab_id;
    end if;
end;

/
ALTER TRIGGER  "CS_DET_SRV_AI" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "CS_GASTOS_BIU" 
    before insert or update  
    on cs_gastos 
    for each row 
begin 
    :new.obs := upper(:new.obs); 
end cs_gastos_biu; 

/
ALTER TRIGGER  "CS_GASTOS_BIU" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "CS_PAGOS_AID" 
AFTER
delete or insert on "CS_PAGOS"
for each row
begin
   if inserting then
     update CS_SERVICIOS_CLIENTES c
     set    c.saldo = (c.saldo - :new.monto)
     where  c.id = :new.SERVICIO_CAB_ID;
   else -- deleting
     update CS_SERVICIOS_CLIENTES c
     set    c.saldo = (c.saldo + :old.monto)
     where  c.id = :old.SERVICIO_CAB_ID;
   end if;
end;

/
ALTER TRIGGER  "CS_PAGOS_AID" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "CS_PAGOS_BIU" 
    before insert or update  
    on cs_pagos 
    for each row 
begin 
    if inserting then 
        :new.created := sysdate; 
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    end if; 
    :new.updated := sysdate; 
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    :new.concepto := upper(:new.concepto); 
end cs_pagos_biu; 

/
ALTER TRIGGER  "CS_PAGOS_BIU" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "CS_SERVICIOS_CLIENTES_BIU" 
    before insert or update  
    on cs_servicios_clientes 
    for each row 
begin 
    if inserting then 
        :new.created := current_date; 
        :new.created_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
        :new.estado_id := paq_estados.co_carga;
        :new.fecha := current_date;
    end if; 
    :new.updated := current_date; 
    :new.updated_by := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
end cs_servicios_clientes_biu; 

/
ALTER TRIGGER  "CS_SERVICIOS_CLIENTES_BIU" ENABLE
/
CREATE OR REPLACE EDITIONABLE TRIGGER  "CS_USUARIOS_BIU" 
    before insert or update  
    on cs_usuarios 
    for each row 
begin 
    if inserting then
        :new.creado := current_date; 
        :new.creado_por := coalesce(sys_context('APEX$SESSION','APP_USER'),user); 
    end if;

    :new.estado_id := nvl(:new.estado_id, paq_estados.co_activo);
    :new.actualizado := current_date; 
    :new.actualizado_por := coalesce(sys_context('APEX$SESSION','APP_USER'),user);

    -- @PabloACespedes 05/02/22 19:37
    -- encripta la contrasenha en caso de ser una nueva insersión o si es una actualizacion pero con nueva contrasenha
    -- en el caso que solo actualice otros datos la contrasenha antigua permanece para la nueva
    if inserting or (updating and :new.pass is not null and cs_if_update(:new.pass, :old.pass)) then
       :new.pass := cs_hash_password(upper(:new.nick), :new.pass);
    else
       :new.pass := :old.pass;
    end if;
end cs_usuarios_biu; 

/
ALTER TRIGGER  "CS_USUARIOS_BIU" ENABLE
/
